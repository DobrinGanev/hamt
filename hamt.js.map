{"version":3,"sources":["hamt.js"],"names":[],"mappings":"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","file":"hamt.js","sourcesContent":["/**\n * @fileOverview Hash Array Mapped Trie.\n * \n * Code based on: https://github.com/exclipy/pdata\n */\nvar hamt = {};\n\nvar constant = x => () => x;\n\n/* Configuration\n ******************************************************************************/\nvar SIZE = 5;\n\nvar BUCKET_SIZE = Math.pow(2, SIZE);\n\nvar mask = BUCKET_SIZE - 1;\n\nvar MAX_INDEX_NODE = BUCKET_SIZE / 2;\n\nvar MIN_ARRAY_NODE = BUCKET_SIZE / 4;\n\n/* Nothing\n ******************************************************************************/\nvar nothing = ({});\n\nvar isNothing = x =>\n    x === nothing;\n\nvar maybe = (val, def) =>\n    isNothing(val) ? def : val;\n\n/* Bit Ops\n ******************************************************************************/\n/**\n * Hamming weight.\n * \n * Taken from: http://jsperf.com/hamming-weight\n */\nvar popcount = (x) => {\n    x -= ((x >> 1) & 0x55555555);\n    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n    x = (x + (x >> 4)) & 0x0f0f0f0f;\n    x += (x >> 8);\n    x += (x >> 16);\n    return (x & 0x7f);\n};\n\nvar hashFragment = (shift, h) =>\n    (h >>> shift) & mask;\n\nvar toBitmap = x =>\n    1 << x;\n\nvar fromBitmap = (bitmap, bit) =>\n    popcount(bitmap & (bit - 1));\n\n/* Array Ops\n ******************************************************************************/\n/**\n * Set a value in an array.\n * \n * @param at Index to change.\n * @param v New value\n * @param arr Array.\n */\nvar arrayUpdate = (at, v, arr) => {\n    var len = arr.length;\n    var out = new Array(len);\n    for (var i = 0; i < len; ++i) \n        out[i] = arr[i];\n    out[at] = v;\n    return out;\n};\n\n/**\n * Remove a value from an array.\n * \n * @param at Index to remove.\n * @param arr Array.\n */\nvar arraySpliceOut = (at, arr) => {\n    var len = arr.length;\n    var out = new Array(len - 1);\n    var i = 0;\n    for (; i < at; ++i)\n        out[i] = arr[i];\n    ++i;\n    for (; i < len; ++i)\n        out[i - 1] = arr[i];\n    return out;\n};\n\n/**\n * Insert a value into an array.\n * \n * @param at Index to insert at.\n * @param v Value to insert,\n * @param arr Array.\n */\nvar arraySpliceIn = (at, v, arr) => {\n    var len = arr.length;\n    var out = new Array(len + 1);\n    var i = 0;\n    for (; i < at; ++i)\n        out[i] = arr[i];\n    out[i] = v;\n    for (; i < len; ++i)\n        out[i + 1] = arr[i];\n    return out;\n};\n\n/* \n ******************************************************************************/\n/**\n * Get 32 bit hash of string.\n * \n * Based on:\n * http://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript-jquery\n */\nvar hash = hamt.hash = str => {\n    if (typeof str === 'number')\n        return str;\n    \n    var hash = 0;\n    for (var i = 0, len = str.length; i < len; ++i) {\n        var c = str.charCodeAt(i);\n        hash = (((hash << 5) - hash) + c) | 0;\n    }\n    return hash;\n};\n\n/* Node Structures\n ******************************************************************************/\n/**\n * Empty node.\n */\nvar empty = ({ __hamt_isEmpty: true });\nhamt.empty = empty;\n\n/**\n * Leaf holding a value.\n * \n * @member hash Hash of key.\n * @member key Key.\n * @member value Value stored.\n */\nvar Leaf = function(hash, key, value) {\n    this.hash = hash;\n    this.key = key;\n    this.value = value;\n};\n\n/**\n * Leaf holding multiple values with the same hash but different keys.\n * \n * @member hash Hash of key.\n * @member children Array of collision children node.\n */\nvar Collision = function(hash, children) {\n    this.hash = hash;\n    this.children = children;\n};\n\n/**\n * Internal node with a sparse set of children.\n * \n * Uses a bitmap and array to pack children.\n * \n * @member mask Bitmap that encode the positions of children in the array.\n * @member children Array of child nodes.\n */\nvar IndexedNode = function(mask, children) {\n    this.mask = mask;\n    this.children = children;\n};\n\n/**\n * Internal node with many children.\n * \n * @member count Number of children.\n * @member children Array of child nodes.\n */\nvar ArrayNode = function(count, children) {\n    this.count = count;\n    this.children = children;\n};\n\n/* \n ******************************************************************************/\nvar isEmpty = x =>\n    !x || x === empty || (x && x.__hamt_isEmpty);\n\n/**\n * Is `node` a leaf node?\n */\nvar isLeaf = node => \n    (  node === empty\n    || node instanceof Leaf\n    || node instanceof Collision);\n\n/**\n * Expand an indexed node into an array node.\n * \n * @param frag Index of added child.\n * @param child Added child.\n * @param mask Index node mask before child added.\n * @param subNodes Index node children before child added.\n */\nvar expand = (frag, child, bitmap, subNodes) => {\n    var bit = bitmap;\n    var arr = [];\n    var count = 0;\n    for (var i = 0; bit; ++i) {\n        if (bit & 1) {\n            arr[i] = subNodes[count];\n            ++count;\n        }\n        bit = bit >>> 1;\n    }\n    arr[frag] = child;\n    return new ArrayNode(count + 1, arr);\n};\n\n/**\n * Collapse an array node into a indexed node.\n */\nvar pack = (removed, elements) => {\n    var children = [];\n    var bitmap = 0;\n    \n    for (var i = 0, len = elements.length; i < len; ++i) {\n        var elem = elements[i];\n        if (i !== removed && !isEmpty(elem)) {\n            children.push(elem);\n            bitmap |= 1 << i;\n        }\n    }\n    return new IndexedNode(bitmap, children);\n};\n\n/**\n * Merge two leaf nodes.\n * \n * @param shift Current shift.\n * @param n1 Node.\n * @param n2 Node.\n */\nvar mergeLeaves = (shift, h1, n1, h2, n2) => {\n    if (h1 === h2)\n        return new Collision(h1, [n2, n1]);\n    \n    var subH1 = hashFragment(shift, h1);\n    var subH2 = hashFragment(shift, h2);\n    return new IndexedNode(toBitmap(subH1) | toBitmap(subH2),\n        subH1 === subH2\n            ?[mergeLeaves(shift + SIZE, h1, n1, h2, n2)]\n            :subH1 < subH2 ? [n1, n2] : [n2, n1]);\n};\n\n/**\n * Update an entry in a collision list.\n * \n * @param hash Hash of collision.\n * @param list Collision list.\n * @param f Update function.\n * @param k Key to update.\n */\nvar updateCollisionList = (h, list, f, k) => {\n    var target, i = 0;\n    for (var len = list.length; i < len; ++i) {\n        var child = list[i];\n        if (child.key === k) {\n            target = child;\n            break;\n        }\n    }\n    \n    var v = target ? f(target.value) : f();\n    return isNothing(v)\n        ?arraySpliceOut(i, list)\n        :arrayUpdate(i, new Leaf(h, k, v), list);\n};\n\n/* Lookups\n ******************************************************************************/\n/**\n * Leaf::get\n */\nLeaf.prototype.lookup = function(_, h, k) {\n    return k === this.key ? this.value : nothing;\n};\n\n/**\n * Collision::get\n */\nCollision.prototype.lookup = function(_, h, k) {\n    if (h === this.hash) {\n        var children = this.children;\n        for (var i = 0, len = children.length; i < len; ++i) {\n            var child = children[i];\n            if (k === child.key)\n                return child.value;\n        }\n    }\n    return nothing;\n};\n\n/**\n * IndexedNode::get\n */\nIndexedNode.prototype.lookup = function(shift, h, k) {\n    var frag = hashFragment(shift, h);\n    var bit = toBitmap(frag);\n    return this.mask & bit\n        ?this.children[fromBitmap(this.mask, bit)].lookup(shift + SIZE, h, k)\n        :nothing;\n};\n\n/**\n * ArrayNode::get\n */\nArrayNode.prototype.lookup = function(shift, h, k) {\n    var frag = hashFragment(shift, h);\n    var child = this.children[frag];\n    return child.lookup(shift + SIZE, h, k);\n};\n\nempty.lookup = () => nothing;\n\n/* Editing\n ******************************************************************************/\n/**\n * Leaf::modify\n */\nLeaf.prototype.modify = function(shift, f, h, k) {\n   if (k === this.key) {\n        var v = f(this.value);\n        return isNothing(v) ? empty : new Leaf(h, k, v);\n    }\n    var v = f();\n    return isNothing(v)\n        ?this\n        :mergeLeaves(shift, this.hash, this, h, new Leaf(h, k, v));\n};\n\n/**\n * Collision::modify\n */\nCollision.prototype.modify = function(shift, f, h, k) {\n    if (h === this.hash) {\n        var list = updateCollisionList(this.hash, this.children, f, k);\n        return list.length > 1\n            ?new Collision(this.hash, list)\n            :list[0]; // collapse single element collision list\n    }\n    var v = f();\n    return isNothing(v)\n        ?this\n        :mergeLeaves(shift, this.hash, this, h, new Leaf(h, k, v));\n};\n\n/**\n * IndexedNode::modify\n */\nIndexedNode.prototype.modify = function(shift, f, h, k) {\n    var mask = this.mask;\n    var children = this.children;\n    var frag = hashFragment(shift, h);\n    var bit = toBitmap(frag);\n    var indx = fromBitmap(mask, bit);\n    var exists = mask & bit;\n    \n    var child = (exists ? children[indx] : empty).modify(shift + SIZE, f, h, k);\n    \n    var removed = exists && isEmpty(child);\n    var added = !exists && !isEmpty(child);\n    \n    var bitmap = removed\n        ?mask & ~bit\n        :added\n            ?mask | bit\n            :mask;\n    \n    return !bitmap\n        ?empty\n    \n    :removed\n        ?children.length <= 2 && isLeaf(children[indx ^ 1])\n            ?children[indx ^ 1] // collapse\n            :new IndexedNode(\n                bitmap,\n                arraySpliceOut(indx, children))\n            \n    :added\n        ?children.length >= MAX_INDEX_NODE\n            ?expand(frag, child, mask, children)\n            :new IndexedNode(\n                bitmap,\n                arraySpliceIn(indx, child, children))\n    \n    // Modify\n    :new IndexedNode(\n        bitmap,\n        arrayUpdate(indx, child, children));\n};\n\n/**\n * ArrayNode::modify\n */\nArrayNode.prototype.modify = function(shift, f, h, k) {\n    var count = this.count;\n    var children = this.children;\n    var frag = hashFragment(shift, h);\n    var child = children[frag];\n    var newChild = (child || empty).modify(shift + SIZE, f, h, k);\n    \n    return isEmpty(child) && !isEmpty(newChild)\n        // add\n        ?new ArrayNode(\n            count + 1,\n            arrayUpdate(frag, newChild, children))\n    \n    :!isEmpty(child) && isEmpty(newChild)\n        // remove\n        ?count - 1 <= MIN_ARRAY_NODE\n            ?pack(frag, children)\n            :new ArrayNode(\n                count - 1,\n                arrayUpdate(frag, empty, children))\n    \n    // Modify\n    :new ArrayNode(\n        count,\n        arrayUpdate(frag, newChild, children));\n};\n\nempty.modify = (_, f, h, k) => {\n    var v = f();\n    return isNothing(v) ? empty : new Leaf(h, k, v);\n};\n\n/* Queries\n ******************************************************************************/\n/**\n * Lookup a value.\n * \n * Returns the value stored for the given hash and key, or alt if none.\n * \n * @param alt Fallback value.\n * @param h 32 bit hash.\n * @param k Key.\n * @param m HAMT\n */\nvar tryGetHash = hamt.tryGetHash = (alt, h, k, m) =>\n    maybe(m.lookup(0, h, k), alt);\n\n/**\n * Lookup a value using the internal `hash`.\n * \n * @see getHash\n */\nvar tryGet = hamt.tryGet = (alt, k, m) =>\n    tryGetHash(alt, hash(k), k, m);\n\n/**\n * Lookup a value.\n * \n * Returns the value stored for the given hash an key or null if none.\n * \n * @param h 32 bit hash.\n * @param k Key.\n * @param m HAMT\n */\nvar getHash = hamt.getHash = (h, k, m) =>\n    tryGetHash(null, h, k, m);\n\n/**\n * Lookup a value using the internal `hash`.\n * \n * @see getHash\n */\nvar get = hamt.get = (k, m) =>\n    tryGet(null, k, m);\n\n/**\n * Does an entry exist?\n * \n * @param h 32 bit hash.\n * @param k Key.\n * @param m HAMT\n */\nvar hasHash = hamt.hasHash = (h, k, m) =>\n    !isNothing(tryGetHash(nothing, h, k, m));\n\n/**\n * Check if a an entry exists using internal `hash`\n * \n * @see hasHash\n */\nvar has = hamt.has = (k, m) =>\n    hasHash(hash(k), k, m);\n\n/* Updates\n ******************************************************************************/\n/**\n * Modify the value stored for a hash.\n * \n * Returns the modified data structure. The input `m` is not modified.\n * \n * @param h 32 bit hash.\n * @param k Key.\n * @param f Function mapping current value to new value.\n * @param m HAMT\n */\nvar modifyHash = hamt.modifyHash = (h, k, f, m) =>\n    m.modify(0, f, h, k);\n\n/**\n * Store a value using the internal `hash` function to calculate the hash from `key`\n * \n * @see modifyHash\n */\nvar modify = hamt.modify = (k, f, m) =>\n    modifyHash(hash(k), k, f, m);\n\n/**\n * Store a value with an explicit hash.\n * \n * @param h 32 bit hash.\n * @param k Key.\n * @param v Value to store.\n * @param m HAMT\n */\nvar setHash = hamt.setHash = (h, k, v, m) =>\n    modifyHash(h, k, constant(v), m);\n\n/**\n * Store a value using the internal `hash` function to calculate the hash from `key`\n * \n * @see setHash\n */\nvar set = hamt.set = (k, v, m) =>\n    setHash(hash(k), k, v, m);\n\n/**\n * Delete a value with an explicit hash.\n * \n * @param m HAMT\n * @param h 32 bit hash.\n * @param k Key.\n */\nvar del = constant(nothing);\nvar removeHash = hamt.removeHash = (h, k, m) =>\n    modifyHash(h, k, del, m);\n\n/**\n * Delete a value using the internal `hash` function to calculate the hash from `key`\n * \n * @see removeHash\n */\nvar remove = hamt.remove = (k, m) =>\n    removeHash(hash(k), k, m);\n\n/* Fold\n ******************************************************************************/\n/**\n * Leaf::fold\n */\nLeaf.prototype.fold = function(f, z) {\n    return f(z, this);\n};\n\n/**\n * Collision::fold\n */\nCollision.prototype.fold = function(f, z) {\n    return this.children.reduce(f, z);\n};\n\n/**\n * IndexedNode::fold\n * \n * `this.children.reduce(fold@f, z)`\n */\nIndexedNode.prototype.fold = function(f, z) {\n    var children = this.children;\n    for (var i = 0, len = children.length; i < len; ++i) {\n        var c = children[i];\n        z = c instanceof Leaf\n            ?f(z, c)\n            :c.fold(f, z);\n    } \n    return z;\n};\n\n/**\n * ArrayNode::fold\n * \n * `this.children.reduce(fold@f, z)`\n */\nArrayNode.prototype.fold = function(f, z) {\n    var children = this.children;\n    for (var i = 0, len = children.length; i < len; ++i) {\n        var c = children[i];\n        if (!isEmpty(c))\n            z = c instanceof Leaf\n                ?f(z, c)\n                :c.fold(f, z);\n    } \n    return z;\n};\n\n/**\n * Visit every entry in the map, aggregating data.\n * \n * Order of nodes is not guaranteed.\n * \n * @param f Function mapping previous value and key value object to new value.\n * @param z Starting value.\n * @param m HAMT\n */\nvar fold = hamt.fold = (f, z, m) =>\n    isEmpty(m) ? z : m.fold(f, z);\n\n/* Aggregate\n ******************************************************************************/\n/**\n * Get the number of entries.\n * \n * @param m HAMT.\n */\nvar inc = x => x + 1;\nvar count = hamt.count = m =>\n    fold(inc, 0, m);\n\n/**\n * Get array of all key value pairs as arrays of [key, value].\n * \n * Order is not guaranteed.\n *\n * @param m HAMT.\n */\nvar buildPairs = (p, x) => { p.push(x); return p; };\nvar pairs = hamt.pairs = m =>\n    fold(buildPairs, [], m);\n\n/**\n * Get array of all keys.\n * \n * Order is not guaranteed.\n * \n * @param m HAMT.\n */\nvar buildKeys = (p, x) => { p.push(x.key); return p; };\nvar keys = hamt.keys = m =>\n    fold(buildKeys, [], m);\n\n/**\n * Get array of all values.\n * \n * Order is not guaranteed, duplicates will be preserved.\n * \n * @param m HAMT.\n */\nvar buildValues = (p, x) => { p.push(x.value); return p; };\nvar values = hamt.values = m =>\n    fold(buildValues, [], m);\n\n\n/* Export\n ******************************************************************************/\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = hamt;\n} else if (typeof define === 'function' && define.amd) {\n    define('hamt', [], () => hamt);\n} else {\n    this.hamt = hamt;\n}\n"],"sourceRoot":"/source/"}