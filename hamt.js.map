{"version":3,"sources":["hamt.js"],"names":[],"mappings":"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","file":"hamt.js","sourcesContent":["/**\n * @fileOverview Hash Array Mapped Trie.\n * \n * Code based on: https://github.com/exclipy/pdata\n*/\nconst hamt = {};\n\nconst constant = x => () => x;\n\n/* Configuration\n ******************************************************************************/\nconst SIZE = 5;\n\nconst BUCKET_SIZE = Math.pow(2, SIZE);\n\nconst MASK = BUCKET_SIZE - 1;\n\nconst MAX_INDEX_NODE = BUCKET_SIZE / 2;\n\nconst MIN_ARRAY_NODE = BUCKET_SIZE / 4;\n\n/* Nothing\n ******************************************************************************/\nconst nothing = ({ __hamt_nothing: true });\n\nconst isNothing = x =>\n    x === nothing || (x && x.__hamt_nothing);\n\nconst maybe = (val, def) =>\n    isNothing(val) ? def : val;\n\n/* Bit Ops\n ******************************************************************************/\n/**\n * Hamming weight.\n * \n * Taken from: http://jsperf.com/hamming-weight\n*/\nconst popcount = (x) => {\n    x -= ((x >> 1) & 0x55555555);\n    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n    x = (x + (x >> 4)) & 0x0f0f0f0f;\n    x += (x >> 8);\n    x += (x >> 16);\n    return (x & 0x7f);\n};\n\nconst hashFragment = (shift, h) =>\n    (h >>> shift) & MASK;\n\nconst toBitmap = x =>\n    1 << x;\n\nconst fromBitmap = (bitmap, bit) =>\n    popcount(bitmap & (bit - 1));\n\n/* Array Ops\n ******************************************************************************/\n/**\n * Set a value in an array.\n * \n * @param at Index to change.\n * @param v New value\n * @param arr Array.\n*/\nconst arrayUpdate = (at, v, arr) => {\n    const len = arr.length;\n    const out = new Array(len);\n    for (let i = 0; i < len; ++i) \n        out[i] = arr[i];\n    out[at] = v;\n    return out;\n};\n\n/**\n * Remove a value from an array.\n * \n * @param at Index to remove.\n * @param arr Array.\n*/\nconst arraySpliceOut = (at, arr) => {\n    const len = arr.length;\n    const out = new Array(len - 1);\n    let i = 0, g = 0;\n    while (i < at)\n        out[g++] = arr[i++];\n    ++i;\n    while (i < len)\n        out[g++] = arr[i++];\n    return out;\n};\n\n/**\n * Insert a value into an array.\n * \n * @param at Index to insert at.\n * @param v Value to insert,\n * @param arr Array.\n*/\nconst arraySpliceIn = (at, v, arr) => {\n    const len = arr.length;\n    const out = new Array(len + 1);\n    let i = 0;\n    let g = 0;\n    while (i < at)\n        out[g++] = arr[i++];\n    out[g++] = v;\n    while (i < len)\n        out[g++] = arr[i++];\n    return out;\n};\n\n/* \n ******************************************************************************/\n/**\n * Get 32 bit hash of string.\n * \n * Based on:\n * http://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript-jquery\n*/\nconst hash = hamt.hash = str => {\n    if (typeof str === 'number')\n        return str;\n    \n    let hash = 0;\n    for (let i = 0, len = str.length; i < len; ++i) {\n        const c = str.charCodeAt(i);\n        hash = (((hash << 5) - hash) + c) | 0;\n    }\n    return hash;\n};\n\n/* Node Structures\n ******************************************************************************/\nconst Node = function() { };\n \n/**\n * Empty node.\n*/\nconst empty = hamt.empty = new Node();\nempty.__hamt_isEmpty = true;\n\n/**\n * Leaf holding a value.\n * \n * @member hash Hash of key.\n * @member key Key.\n * @member value Value stored.\n*/\nconst Leaf = function(hash, key, value) {\n    this.hash = hash;\n    this.key = key;\n    this.value = value;\n};\nLeaf.prototype = new Node;\n\n/**\n * Leaf holding multiple values with the same hash but different keys.\n * \n * @member hash Hash of key.\n * @member children Array of collision children node.\n*/\nconst Collision = function(hash, children) {\n    this.hash = hash;\n    this.children = children;\n};\nCollision.prototype = new Node;\n\n/**\n * Internal node with a sparse set of children.\n * \n * Uses a bitmap and array to pack children.\n * \n * @member mask Bitmap that encode the positions of children in the array.\n * @member children Array of child nodes.\n*/\nconst IndexedNode = function(mask, children) {\n    this.mask = mask;\n    this.children = children;\n};\nIndexedNode.prototype = new Node;\n\n/**\n * Internal node with many children.\n * \n * @member count Number of children.\n * @member children Array of child nodes.\n*/\nconst ArrayNode = function(count, children) {\n    this.count = count;\n    this.children = children;\n};\nArrayNode.prototype = new Node;\n\n/* \n ******************************************************************************/\nconst isEmpty = x =>\n    !x || x === empty || (x && x.__hamt_isEmpty);\n\n/**\n * Is `node` a leaf node?\n*/\nconst isLeaf = node => \n    (  node === empty\n    || node instanceof Leaf\n    || node instanceof Collision);\n\n/**\n * Expand an indexed node into an array node.\n * \n * @param frag Index of added child.\n * @param child Added child.\n * @param mask Index node mask before child added.\n * @param subNodes Index node children before child added.\n*/\nconst expand = (frag, child, bitmap, subNodes) => {\n    const arr = [];\n\n    let bit = bitmap;\n    let count = 0;\n    for (let i = 0; bit; ++i) {\n        if (bit & 1)\n            arr[i] = subNodes[count++];\n        bit >>>= 1;\n    }\n    arr[frag] = child;\n    return new ArrayNode(count + 1, arr);\n};\n\n/**\n * Collapse an array node into a indexed node.\n*/\nconst pack = (count, removed, elements) => {\n    const children = new Array(count - 1);\n    let g = 0;\n    let bitmap = 0;\n    for (let i = 0, len = elements.length; i < len; ++i) {\n        const elem = elements[i];\n        if (i !== removed && !isEmpty(elem)) {\n            children[g++] = elem;\n            bitmap |= 1 << i;\n        }\n    }\n    return new IndexedNode(bitmap, children);\n};\n\n/**\n * Merge two leaf nodes.\n * \n * @param shift Current shift.\n * @param h1 Node 1 hash.\n * @param n1 Node 1.\n * @param h2 Node 2 hash.\n * @param n2 Node 2.\n*/\nconst mergeLeaves = (shift, h1, n1, h2, n2) => {\n    if (h1 === h2)\n        return new Collision(h1, [n2, n1]);\n    \n    const subH1 = hashFragment(shift, h1);\n    const subH2 = hashFragment(shift, h2);\n    return new IndexedNode(toBitmap(subH1) | toBitmap(subH2),\n        subH1 === subH2\n            ?[mergeLeaves(shift + SIZE, h1, n1, h2, n2)]\n            :subH1 < subH2 ? [n1, n2] : [n2, n1]);\n};\n\n/**\n * Update an entry in a collision list.\n * \n * @param hash Hash of collision.\n * @param list Collision list.\n * @param f Update function.\n * @param k Key to update.\n*/\nconst updateCollisionList = (h, list, f, k) => {\n    let target;\n    let i = 0;\n    for (const len = list.length; i < len; ++i) {\n        const child = list[i];\n        if (child.key === k) {\n            target = child;\n            break;\n        }\n    }\n    \n    const v = target ? f(target.value) : f();\n    return isNothing(v)\n        ?arraySpliceOut(i, list)\n        :arrayUpdate(i, new Leaf(h, k, v), list);\n};\n\n/* Lookups\n ******************************************************************************/\n/**\n * Leaf::get\n*/\nLeaf.prototype._lookup = function(_, h, k) {\n    return k === this.key ? this.value : nothing;\n};\n\n/**\n * Collision::get\n*/\nCollision.prototype._lookup = function(_, h, k) {\n    if (h === this.hash) {\n        const children = this.children;\n        for (let i = 0, len = children.length; i < len; ++i) {\n            const child = children[i];\n            if (k === child.key)\n                return child.value;\n        }\n    }\n    return nothing;\n};\n\n/**\n * IndexedNode::get\n*/\nIndexedNode.prototype._lookup = function(shift, h, k) {\n    const frag = hashFragment(shift, h);\n    const bit = toBitmap(frag);\n    return this.mask & bit\n        ?this.children[fromBitmap(this.mask, bit)]._lookup(shift + SIZE, h, k)\n        :nothing;\n};\n\n/**\n * ArrayNode::get\n*/\nArrayNode.prototype._lookup = function(shift, h, k) {\n    const frag = hashFragment(shift, h);\n    const child = this.children[frag];\n    return child._lookup(shift + SIZE, h, k);\n};\n\nempty._lookup = () => nothing;\n\n/* Editing\n ******************************************************************************/\nLeaf.prototype._modify = function(shift, f, h, k) {\n   if (k === this.key) {\n        const v = f(this.value);\n        return isNothing(v) ? empty : new Leaf(h, k, v);\n    }\n    const v = f();\n    return isNothing(v)\n        ?this\n        :mergeLeaves(shift, this.hash, this, h, new Leaf(h, k, v));\n};\n\nCollision.prototype._modify = function(shift, f, h, k) {\n    if (h === this.hash) {\n        const list = updateCollisionList(this.hash, this.children, f, k);\n        return list.length > 1\n            ?new Collision(this.hash, list)\n            :list[0]; // collapse single element collision list\n    }\n    const v = f();\n    return isNothing(v)\n        ?this\n        :mergeLeaves(shift, this.hash, this, h, new Leaf(h, k, v));\n};\n\nIndexedNode.prototype._modify = function(shift, f, h, k) {\n    const mask = this.mask;\n    const children = this.children;\n    const frag = hashFragment(shift, h);\n    const bit = toBitmap(frag);\n    const indx = fromBitmap(mask, bit);\n    const exists = mask & bit;\n    const current = exists ? children[indx] : empty;\n    const child = current._modify(shift + SIZE, f, h, k);\n        \n    if (exists && isEmpty(child)) { // remove\n        const bitmap = mask & ~bit;\n        if (!bitmap)\n            return empty;\n        return children.length <= 2 && isLeaf(children[indx ^ 1])\n            ?children[indx ^ 1] // collapse\n            :new IndexedNode(\n                bitmap,\n                arraySpliceOut(indx, children))\n    }\n    if (!exists && !isEmpty(child)) { // add\n        return children.length >= MAX_INDEX_NODE\n            ?expand(frag, child, mask, children)\n            :new IndexedNode(\n                mask | bit,\n                arraySpliceIn(indx, child, children))\n    }\n    \n    // modify\n    return current === child\n        ?this\n        :new IndexedNode(\n            mask,\n            arrayUpdate(indx, child, children));\n};\n\nArrayNode.prototype._modify = function(shift, f, h, k) {\n    const count = this.count;\n    const children = this.children;\n    const frag = hashFragment(shift, h);\n    const child = children[frag];\n    const newChild = (child || empty)._modify(shift + SIZE, f, h, k);\n    \n    if (isEmpty(child) && !isEmpty(newChild)) { // add\n        return new ArrayNode(\n            count + 1,\n            arrayUpdate(frag, newChild, children))\n    }\n    if (!isEmpty(child) && isEmpty(newChild)) { // remove\n        return count - 1 <= MIN_ARRAY_NODE\n            ?pack(count, frag, children)\n            :new ArrayNode(\n                count - 1,\n                arrayUpdate(frag, empty, children))\n    }\n    \n    // modify\n    return child === newChild\n        ?this\n        :new ArrayNode(\n            count,\n            arrayUpdate(frag, newChild, children));\n};\n\nempty._modify = (_, f, h, k) => {\n    const v = f();\n    return isNothing(v) ? empty : new Leaf(h, k, v);\n};\n\n/* Queries\n ******************************************************************************/\n/**\n    Lookup the value for `key` in `map`.\n    \n    Returns the value or `alt` if none.\n*/\nconst tryGet = hamt.tryGet = (alt, key, map) =>\n    maybe(map._lookup(0, hash(key), key), alt);\n\nNode.prototype.tryGet = function(key, alt) {\n    return tryGet(alt, key, this);\n};\n\n/**\n    Lookup the value for `key` in `map`.\n    \n    Returns the value or `undefined` if none.\n*/\nconst get = hamt.get = (key, map) =>\n    tryGet(undefined, key, map);\n\nNode.prototype.get = function(key, alt) {\n    return tryGet(alt, key, this);\n};\n\n/**\n    Does an entry exist for `key` in `map`?\n*/\nconst has = hamt.has = (key, map) =>\n    !isNothing(tryGet(nothing, key, map));\n\nNode.prototype.has = function(key) {\n    return has(key, this);\n};\n\n/* Updates\n ******************************************************************************/\n/**\n    Alter the value stored for `key` in `map` using function `f`.\n    \n    `f` is invoked with the current value for `k` if it exists,\n    or no arguments if no such value exists. `modify` will always either\n    update or insert a value into the map.\n    \n    Returns a map with the modified value. Does not alter `map`.\n*/\nconst modify = hamt.modify = (f, key, map) =>\n    map._modify(0, f, hash(key), key);\n\nNode.prototype.modify = function(key, f) {\n    return modify(f, key, this);\n};\n\n/**\n    Store `value` for `key` in `map`.\n\n    Returns a map with the modified value. Does not alter `map`.\n*/\nconst set = hamt.set = (value, key, map) =>\n    modify(constant(value), key, map);\n\nNode.prototype.set = function(key, value) {\n    return set(value, key, this);\n};\n\n/**\n    Remove the entry for `key` in `map`.\n\n    Returns a map with the value removed. Does not alter `map`.\n*/\nconst del = constant(nothing);\nconst remove = hamt.remove = (key, map) =>\n    modify(del, key, map);\n\nNode.prototype.remove = function(key) {\n    return remove(key, this);\n};\n\n/* Fold\n ******************************************************************************/\nLeaf.prototype.fold = function(f, z) {\n    return f(z, this);\n};\n\nCollision.prototype.fold = function(f, z) {\n    return this.children.reduce(f, z);\n};\n\nIndexedNode.prototype.fold = function(f, z) {\n    const children = this.children;\n    for (let i = 0, len = children.length; i < len; ++i) {\n        const c = children[i];\n        z = c instanceof Leaf\n            ?f(z, c)\n            :c.fold(f, z);\n    } \n    return z;\n};\n\nArrayNode.prototype.fold = function(f, z) {\n    const children = this.children;\n    for (let i = 0, len = children.length; i < len; ++i) {\n        const c = children[i];\n        if (!isEmpty(c))\n            z = c instanceof Leaf\n                ?f(z, c)\n                :c.fold(f, z);\n    } \n    return z;\n};\n\n/**\n    Visit every entry in the map, aggregating data.\n\n    Order of nodes is not guaranteed.\n    \n    @param f Function mapping previous value and key value object to new value.\n    @param z Starting value.\n    @param m HAMT\n*/\nconst fold = hamt.fold = (f, z, m) =>\n    isEmpty(m) ? z : m.fold(f, z);\n\nNode.prototype.fold = function(f, z) {\n    return fold(f, z, this);\n};\n\n/* Aggregate\n ******************************************************************************/\n/**\n    Get the number of entries in `map`.\n*/\nlet inc = x => x + 1;\nconst count = hamt.count = map =>\n    fold(inc, 0, map);\n\nNode.prototype.count = function() {\n    return count(this);\n};\n\n/**\n    Get array of all key value pairs as arrays of [key, value] in `map`.\n \n    Order is not guaranteed.\n*/\nconst buildPairs = (p, x) => { p.push(x); return p; };\nconst pairs = hamt.pairs = map =>\n    fold(buildPairs, [], m);\n\nNode.prototype.pairs = function() {\n    return count(this);\n};\n\n/**\n    Get array of all keys in `map`.\n\n    Order is not guaranteed.\n*/\nconst buildKeys = (p, x) => { p.push(x.key); return p; };\nconst keys = hamt.keys = m =>\n    fold(buildKeys, [], m);\n\nNode.prototype.keys = function() {\n    return keys(this);\n};\n\n/**\n    Get array of all values in `map`.\n\n    Order is not guaranteed, duplicates are preserved.\n*/\nconst buildValues = (p, x) => { p.push(x.value); return p; };\nconst values = hamt.values = m =>\n    fold(buildValues, [], m);\n\nNode.prototype.values = function() {\n    return values(this);\n};\n\n/* Export\n ******************************************************************************/\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = hamt;\n} else if (typeof define === 'function' && define.amd) {\n    define('hamt', [], () => hamt);\n} else {\n    this.hamt = hamt;\n}\n"],"sourceRoot":"/source/"}